*En app där Instruktörer kan sälja kurser till studenter.

entity/huvud aktörer /huvud object i appen ? /model/data sparas in i databasen


Model  achitecture/design: 
  - Student   : vad ska vi spara om student 
  - Lärare    :  ==

  user :   name, email, password , role: lärare

  - Kurser    : ==





----- 

Routes: 
 /register, 
 /login,  
 /resetPassword, 
 /resetPassword/:token,  
 /resetForm, 
 /instructor, 
 /student,
 
    === userRoute



   

 /, 
 /courses,
 /course/:id

 == courseRoute


 views: 
  register.ejs, 
  login.ejs, 
  resetPassword.ejs,
  resetForm.ejs, 
  courses.ejs, 
  error.ejs

 









MVC:- projektmapp/filer design. 



Whole app architecture: 









-----
NoSQL
  Entity relation :  
  One to one relation :  en person kan ha ett IDkort
  One to many relation: en skola kan ha flera studenter
  many to many relation : lärare kan ha flera studenter , studenter kan ha flera lärare.




** JWT, Cookie , andra alternative : ok 
** gå igenom gammal kodbasen : ok 
** reset password , mail service in i register 
** Lärare :-  skapa kurser 
** authorization 

// fixa profile , menu
// try catch , visa error meddelande


// 1.controller (2.renderar ejs template med data .Då måste man skapa ejs views) 
 -> 3.route ->  4. index.js


// lärare verify delen : verifyInstructor
// CRUD  
// user Read : visa kuserna 
// user ska kunna lägga till kurser i cart. 
// relationer mellan modellerna 
// egna metoder för att kunna hantera anpassad business logik. 


Instructor -> som skapa och se egna kurser
   
Instructor -> user -> kursLista 

återkommer om 3 min
 

user -> se alla kurserna  -> shoppingList 



// Normalisation 
course - instructor - user      courseOrder ( course, user , instructor )


denormalised 
// course , user     en till lista av kurser 
// i user lagrade vi kursId som referens 
// populate för att kunna extrahera data som tillhör till kursId




Onsdag: 
// payment service med stripe   



//   

Torsdag:
// organizera koden 

** Logout ska synas i menubar 

** add course  
** Profile sidan : showmycourses
** add to cart menyn
** Checkout 
** showmycourses
** add checkout i add to cart route


// Heroku , aws , digital, gcp, azure 


** Heroku deployement : 


* Fixa package.json :
  Steg 1:  
   Använd er node version:  node -v i terminalen för att kunna hitta er node version
  och sen lägg detta i package.json 
   "engines": {
    "node": "12.19.0"
  },

* package.json : fixa "start" :" node index.js"
* fixa port i index.js filen:  process.env.PORT




Ta bort package-lock.json. 




Steg 2:

fix git : 
   // ifall ni vill ta bort git init  :  rm -rf .git   // tar bort git init
  - .gitignore node_modules/  .env 
  - git init på det projektet ni ska deploya 
  - git add . + commit 


Steg 3: 
heroku cli :  
cli: 
    * windows : npm i @heroku-cli/command // alternative ladda ner : https://devcenter.heroku.com/articles/heroku-cli

    * Mac user: brew tap heroku/brew && brew install heroku

-----  ---- 


Steg 4: 
Heroku login och deployment:-
    -  heroku login
    -  heroku create
    -  git push heroku main

- i fall ni ser src reference error - bytt branch till main 

steg 5: 

Ifall ni inte har gjort detta steg 1 gör så: 
   * fixa port i index.js filen:  process.env.PORT
   * package.json : fixa "start" :" node index.js"


Fixa env variabler in i heroku app -> settings-> reveal config vars -> mata in env data 

** Git add . + commit + git push heroku main  // ifall du ändrar något 

Gå till höger sida i setting -> more -> restart all dynos.










// Client server separat architecture 



=== checklista för ehandel === == ===
// ni crud på databasen 
// kan skapa enga methods i modellerna
// controller , router
// middleware som tar hand sessions, cookies 
// inloggning , reset password
// mail server 
// payment . stripe intregration 
// deployement 
==== ====== ==  ===== ========  == ===== 

